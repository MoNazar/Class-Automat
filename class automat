// created by Mohammed and Mascha

#include <iostream>
#include <stdio.h>

using namespace std;


class Automat {
// data of class automat
public:
    // attributes
    int x, j;
    int const constexpr static size = 10;
    int A1[size][size];
    int A2[size][size];
    // functions

    // creategrid: Benutzer setzt anfangs den Status des Automaten
    void creategrid() {
        for (x = 0; x < size; x++) {
            for (j = 0; j < size; j++) {
                A1[x][j] = rand()%2;

        }}
    }
    // showgrid: Spielfeld anzeigen
    void showgrid() {
        int x, j;
        for (x = 0; x < size; x++) {
            for (j = 0; j < size; j++) {
                printf("%d ", A1[x][j]);
            }
            printf("\n");
        }
    }
    /*
    statetransition: f체hrt den Zustands체bergang durch
    Counts the neighbors of cell A1[a][m] starting with cell A1[a -1][m - 1]
    ------------------------------------------
    | a - 1, m - 1 | a, m - 1 | a + 1, m - 1 |
    ----------------------------------------
    | a - 1, m     | a, m     | a + 1, m     |
    ------------------------------------------
    | a - 1, m + 1 | a, m + 1 | a + 1, m + 1 |
    ------------------------------------------
    */
    void statetransition(){
        int a, m;
        for (a = 0; a < size; a++) {
            for (m = 0; m < size; m++) {
                int counter = 0;
                    if (A1[a - 1][m - 1] == 1) {
                        counter++;}
                    if (A1[a][m - 1] == 1) {
                        counter++; }
                    if (A1[a - 1][m - 1] == 1) {
                        counter++; }
                    if (A1[a - 1][m] == 1) {
                        counter++; }
                    if (A1[a + 1][m] == 1) {
                        counter++; }
                    if (A1[a - 1][m + 1] == 1) {
                        counter++; }
                    if (A1[a][m + 1] == 1) {
                        counter++;}
                    if (A1[a + 1][m + 1] == 1) {
                        counter++; }
                    /* in the following conditional statements the rules of Conway's Game of Life apply:
                     * - death of over- or underpopulation
                     * - survival
                     * - birth
                     * - stays dead
                     * */
                if ((A1[a][m] == 1 && counter < 2) || ((A1[a][m] == 1) && counter > 3)){
                    A2[a][m] = 0;
                }
                else if((A1[a][m] == 1 && counter >= 2) && (A1[a][m] == 1 && counter <= 3)){
                    A2[a][m] = 1;
                }

                else if(A1[a][m] == 0 && counter == 3){
                    A2[a][m] = 1;}

                else{
                    A2[a][m] = A1[a][m];}
                }
        }
        printf("\n");
    }

    // currentgrid: repr채sentiert das Spielfeld nach einem Zustands체bergang
    void currentgrid() {
        int x, j;
        for (x = 0; x < size; x++) {
            for (j = 0; j < size; j++) {
                printf("%d ", A2[x][j]);
            }
            printf("\n");

        }
    }

};

int main() {
    Automat automat;
    automat.creategrid();
    printf("\n");
    automat.showgrid();
    printf("\n");
    automat.statetransition();
    automat.currentgrid();
    printf("\n");
    return 0;
}
